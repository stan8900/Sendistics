import asyncio
import logging
import os
from datetime import datetime
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import exceptions, executor
from aiogram.utils.markdown import bold, hbold, quote_html
from dotenv import load_dotenv

from app.auto_sender import AutoSender
from app.keyboards import auto_menu_keyboard, groups_keyboard, main_menu_keyboard
from app.states import AutoCampaignStates
from app.storage import Storage


load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Missng BOT_TOKEN")

storage = Storage(Path("data/storage.json"))
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

bot["storage"] = storage
bot["auto_sender"] = None  # filled on startup

WELCOME_TEXT = (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n"
    "üõ† –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    "üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤\n"
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"
)


async def show_main_menu(message: types.Message) -> None:
    try:
        await message.edit_text(WELCOME_TEXT, reply_markup=main_menu_keyboard())
    except exceptions.MessageNotModified:
        pass


async def show_auto_menu(message: types.Message, auto_data: dict) -> None:
    status = "–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ" if auto_data.get("is_enabled") else "–ù–µ –∑–∞–ø—É—â–µ–Ω–∞"
    message_preview_raw = auto_data.get("message") or "‚Äî –Ω–µ –∑–∞–¥–∞–Ω–æ"
    if len(message_preview_raw) > 180:
        message_preview_raw = message_preview_raw[:177] + "..."
    message_preview = quote_html(message_preview_raw)
    if len(message_preview) > 180:
        message_preview = message_preview[:177] + "..."
    interval = auto_data.get("interval_minutes") or 0
    targets = auto_data.get("target_chat_ids") or []
    text = (
        f"üõ† {hbold('–ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞')}\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω\n"
        f"–í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø: {len(targets)}\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_preview}"
    )
    try:
        await message.edit_text(text, reply_markup=auto_menu_keyboard(is_enabled=auto_data.get("is_enabled")))
    except exceptions.MessageNotModified:
        pass


@dp.message_handler(commands=["start", "menu"], state="*")
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    await state.finish()
    await message.answer(WELCOME_TEXT, reply_markup=main_menu_keyboard())


@dp.message_handler(commands=["cancel"], state="*")
async def cmd_cancel(message: types.Message, state: FSMContext) -> None:
    if await state.get_state() is None:
        return
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")
    await message.answer(WELCOME_TEXT, reply_markup=main_menu_keyboard())


@dp.callback_query_handler(lambda c: c.data == "main:auto")
async def cb_main_auto(call: types.CallbackQuery) -> None:
    await call.answer()
    auto_data = await storage.get_auto()
    await show_auto_menu(call.message, auto_data)


@dp.callback_query_handler(lambda c: c.data == "main:search")
async def cb_main_search(call: types.CallbackQuery) -> None:
    await call.answer()
    known = await storage.list_known_chats()
    lines = [
        "üîç <b>–ü–æ–∏—Å–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø</b>",
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        "2. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç –ø–æ–ª—É—á–∏—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≥—Ä—É–ø–ø–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ.",
        "3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª '–ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
    ]
    if known:
        lines.append("\n–¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã:")
        for info in known.values():
            title = quote_html(info.get("title") or str(info.get("chat_id")))
            lines.append(f"‚Ä¢ {title}")
    else:
        lines.append("\n–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.")
    await call.message.edit_text("\n".join(lines), reply_markup=main_menu_keyboard())


@dp.callback_query_handler(lambda c: c.data == "main:stats")
async def cb_main_stats(call: types.CallbackQuery) -> None:
    await call.answer()
    auto = await storage.get_auto()
    stats = auto.get("stats") or {}
    sent_total = stats.get("sent_total", 0)
    last_sent_at = stats.get("last_sent_at")
    last_error = stats.get("last_error")
    human_time = "‚Äî"
    if last_sent_at:
        try:
            dt = datetime.fromisoformat(last_sent_at)
            human_time = dt.strftime("%d.%m.%Y %H:%M:%S")
        except ValueError:
            human_time = last_sent_at
    lines = [
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏</b>",
        f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_total}",
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {human_time}",
    ]
    if last_error:
        lines.append("–û—à–∏–±–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞:")
        lines.append(last_error)
    else:
        lines.append("–û—à–∏–±–æ–∫ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    await call.message.edit_text("\n".join(lines), reply_markup=main_menu_keyboard())


@dp.callback_query_handler(lambda c: c.data == "main:settings")
async def cb_main_settings(call: types.CallbackQuery) -> None:
    await call.answer()
    auto = await storage.get_auto()
    interval = auto.get("interval_minutes")
    message_text_raw = auto.get("message") or "‚Äî –Ω–µ –∑–∞–¥–∞–Ω–æ"
    message_text = quote_html(message_text_raw)
    targets = auto.get("target_chat_ids") or []
    status = "–ê–∫—Ç–∏–≤–Ω–∞" if auto.get("is_enabled") else "–û—Ç–∫–ª—é—á–µ–Ω–∞"
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω\n"
        f"–ì—Ä—É–ø–ø—ã: {len(targets)} –≤—ã–±—Ä–∞–Ω–æ\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}"
    )
    await call.message.edit_text(text, reply_markup=main_menu_keyboard())


@dp.callback_query_handler(lambda c: c.data == "auto:back")
async def cb_auto_back(call: types.CallbackQuery) -> None:
    await call.answer()
    await show_main_menu(call.message)


@dp.callback_query_handler(lambda c: c.data == "auto:set_message")
async def cb_auto_set_message(call: types.CallbackQuery, state: FSMContext) -> None:
    await call.answer()
    await AutoCampaignStates.waiting_for_message.set()
    await call.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


@dp.message_handler(state=AutoCampaignStates.waiting_for_message, content_types=types.ContentTypes.TEXT)
async def process_auto_message(message: types.Message, state: FSMContext) -> None:
    text = message.text.strip()
    if not text:
        await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await storage.set_auto_message(text)
    await storage.ensure_constraints()
    auto_sender: AutoSender = message.bot["auto_sender"]
    await auto_sender.refresh()
    await state.finish()
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    auto_data = await storage.get_auto()
    await message.answer(
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        reply_markup=auto_menu_keyboard(is_enabled=auto_data.get("is_enabled")),
    )


@dp.callback_query_handler(lambda c: c.data == "auto:set_interval")
async def cb_auto_set_interval(call: types.CallbackQuery, state: FSMContext) -> None:
    await call.answer()
    await AutoCampaignStates.waiting_for_interval.set()
    await call.message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0).\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


@dp.message_handler(state=AutoCampaignStates.waiting_for_interval)
async def process_auto_interval(message: types.Message, state: FSMContext) -> None:
    content = message.text.strip()
    if not content.isdigit():
        await message.reply("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    minutes = int(content)
    if minutes <= 0:
        await message.reply("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    await storage.set_auto_interval(minutes)
    await storage.ensure_constraints()
    auto_sender: AutoSender = message.bot["auto_sender"]
    await auto_sender.refresh()
    await state.finish()
    await message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {minutes} –º–∏–Ω.")
    auto_data = await storage.get_auto()
    await message.answer(
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        reply_markup=auto_menu_keyboard(is_enabled=auto_data.get("is_enabled")),
    )


@dp.callback_query_handler(lambda c: c.data == "auto:pick_groups")
async def cb_auto_pick_groups(call: types.CallbackQuery) -> None:
    await call.answer()
    known = await storage.list_known_chats()
    auto = await storage.get_auto()
    selected = auto.get("target_chat_ids") or []
    if not known:
        await call.message.answer(
            "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º,"
            " –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        return
    text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å —á–∞—Ç."
    )
    await call.message.edit_text(text, reply_markup=groups_keyboard(known, selected))


@dp.callback_query_handler(lambda c: c.data.startswith("group:"))
async def cb_group_toggle(call: types.CallbackQuery) -> None:
    await call.answer()
    action = call.data.split(":", maxsplit=1)[1]
    if action == "done":
        auto_data = await storage.get_auto()
        await show_auto_menu(call.message, auto_data)
        return
    chat_id = int(action)
    known = await storage.list_known_chats()
    title_raw = (known.get(str(chat_id)) or {}).get("title") or str(chat_id)
    title = quote_html(title_raw)
    selected = await storage.toggle_target_chat(chat_id, title_raw)
    await storage.ensure_constraints()
    auto_sender: AutoSender = call.bot["auto_sender"]
    await auto_sender.refresh()
    known = await storage.list_known_chats()
    auto = await storage.get_auto()
    reply_text = (
        f"–ß–∞—Ç {'–¥–æ–±–∞–≤–ª–µ–Ω –≤' if selected else '—É–±—Ä–∞–Ω –∏–∑'} —Ä–∞—Å—Å—ã–ª–∫–∏: {title}\n"
        "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
    )
    await call.message.edit_text(reply_text, reply_markup=groups_keyboard(known, auto.get("target_chat_ids")))


@dp.callback_query_handler(lambda c: c.data == "auto:start")
async def cb_auto_start(call: types.CallbackQuery) -> None:
    await call.answer()
    auto = await storage.get_auto()
    if not auto.get("message"):
        await call.message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    if not auto.get("target_chat_ids"):
        await call.message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    if (auto.get("interval_minutes") or 0) <= 0:
        await call.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    await storage.set_auto_enabled(True)
    auto_sender: AutoSender = call.bot["auto_sender"]
    await auto_sender.ensure_running()
    await call.message.answer("–ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
    updated = await storage.get_auto()
    await show_auto_menu(call.message, updated)


@dp.callback_query_handler(lambda c: c.data == "auto:stop")
async def cb_auto_stop(call: types.CallbackQuery) -> None:
    await call.answer()
    await storage.set_auto_enabled(False)
    auto_sender: AutoSender = call.bot["auto_sender"]
    await auto_sender.stop()
    await call.message.answer("–ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    updated = await storage.get_auto()
    await show_auto_menu(call.message, updated)


@dp.my_chat_member_handler()
async def handle_my_chat_member(update: types.ChatMemberUpdated) -> None:
    new_status = update.new_chat_member.status
    chat = update.chat
    if chat.type not in (types.ChatType.GROUP, types.ChatType.SUPERGROUP):
        return
    title = chat.title or chat.full_name or str(chat.id)
    if new_status == types.ChatMemberStatus.ADMINISTRATOR:
        await storage.upsert_known_chat(chat.id, title)
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç %s (%s)", chat.id, title)
    elif new_status in (
        types.ChatMemberStatus.LEFT,
        types.ChatMemberStatus.KICKED,
        types.ChatMemberStatus.RESTRICTED,
    ):
        await storage.remove_known_chat(chat.id)
        logger.info("–£–¥–∞–ª—ë–Ω —á–∞—Ç %s", chat.id)


@dp.message_handler(content_types=types.ContentTypes.TEXT, chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def handle_group_text(message: types.Message) -> None:
    chat = message.chat
    title_raw = chat.title or chat.full_name or str(chat.id)
    bot_id = message.bot.get("bot_id")
    if bot_id is None:
        me = await message.bot.get_me()
        bot_id = me.id
        message.bot["bot_id"] = bot_id
    member = await message.bot.get_chat_member(chat.id, bot_id)
    if member.is_chat_admin():
        await storage.upsert_known_chat(chat.id, title_raw)


async def on_startup(dispatcher: Dispatcher) -> None:
    me = await dispatcher.bot.get_me()
    auto_sender = AutoSender(dispatcher.bot, storage, me.id)
    dispatcher.bot["auto_sender"] = auto_sender
    dispatcher.bot["bot_id"] = me.id
    await storage.ensure_constraints()
    await auto_sender.start_if_enabled()
    logger.info("–ë–æ—Ç %s (%s) –∑–∞–ø—É—â–µ–Ω", me.first_name, me.id)


async def on_shutdown(dispatcher: Dispatcher) -> None:
    auto_sender: Optional[AutoSender] = dispatcher.bot.get("auto_sender")
    if auto_sender:
        await auto_sender.stop()
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
