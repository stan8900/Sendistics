import asyncio
import logging
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Any, Dict, Optional, Set

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import exceptions, executor
from aiogram.utils.markdown import hbold, quote_html
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

from app.auto_sender import AutoSender
from app.keyboards import auto_menu_keyboard, groups_keyboard, main_menu_keyboard, payme_keyboard
from app.states import AutoCampaignStates, PaymentStates
from app.storage import Storage


BASE_DIR = Path(__file__).resolve().parent
load_dotenv(BASE_DIR / ".env")
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Missng BOT_TOKEN")

storage_path_env = os.getenv("STORAGE_PATH")
if storage_path_env:
    storage_path = Path(storage_path_env)
    if not storage_path.is_absolute():
        storage_path = (BASE_DIR / storage_path).resolve()
else:
    storage_path = BASE_DIR / "data" / "storage.json"

storage = Storage(storage_path)
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

bot["storage"] = storage
bot["auto_sender"] = None  # filled on startup

WELCOME_TEXT = (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n"
    "‚öí –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
    "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚Äî –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—É\n"
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
    "üìã –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—ã ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏\n"
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
)

PAYMENT_AMOUNT = 100_000
PAYMENT_CURRENCY = "UZS"
PAYMENT_DESCRIPTION = "–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞"
PAYMENT_VALID_DAYS = 30

STATIC_ADMIN_IDS: Set[int] = {
    int(admin_id.strip())
    for admin_id in os.getenv("ADMIN_IDS", "").split(",")
    if admin_id.strip().isdigit()
}


async def get_user_role(user_id: int) -> str:
    role = await storage.get_user_role(user_id)
    return role or "user"


async def collect_admin_ids() -> Set[int]:
    admins = set(STATIC_ADMIN_IDS)
    dynamic = await storage.list_admin_user_ids()
    admins.update(dynamic)
    return admins


async def is_admin_user(user_id: int) -> bool:
    if user_id in STATIC_ADMIN_IDS:
        return True
    role = await storage.get_user_role(user_id)
    return role == "admin"


def format_currency(amount: int, currency: str) -> str:
    formatted = f"{amount:,}".replace(",", " ")
    return f"{formatted} {currency}"


def payment_admin_keyboard(request_id: str) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data=f"payment:approve:{request_id}"),
        InlineKeyboardButton("‚ùå –ù–µ –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment:decline:{request_id}"),
    )
    return keyboard


def build_payment_admin_text(payment: Dict[str, Any]) -> str:
    user_display = payment.get("full_name") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = payment.get("username")
    if username:
        user_display = f"{user_display} (@{username})"
    card_number = payment.get("card_number") or "‚Äî"
    card_name = payment.get("card_name") or "‚Äî"
    status = payment.get("status", "pending")
    status_map = {
        "pending": "–í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "approved": "–û–ø–ª–∞—á–µ–Ω ‚úÖ",
        "declined": "–ù–µ –æ–ø–ª–∞—á–µ–Ω ‚ùå",
    }
    status_text = status_map.get(status, status)
    created_at = payment.get("created_at")
    resolved_at = payment.get("resolved_at")
    resolved_by = payment.get("resolved_by") or {}
    lines = [
        "üí≥ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>",
        f"ID –∑–∞—è–≤–∫–∏: <code>{payment.get('request_id')}</code>",
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {quote_html(user_display)}",
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{payment.get('user_id')}</code>",
        f"–°—É–º–º–∞: {format_currency(PAYMENT_AMOUNT, PAYMENT_CURRENCY)}",
        f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <code>{card_number}</code>",
        f"–ò–º—è –Ω–∞ –∫–∞—Ä—Ç–µ: {quote_html(card_name)}",
        f"–°—Ç–∞—Ç—É—Å: {status_text}",
    ]
    if created_at:
        lines.append(f"–°–æ–∑–¥–∞–Ω–æ: {quote_html(created_at)}")
    if resolved_at:
        lines.append(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {quote_html(resolved_at)}")
        if status == "approved":
            try:
                resolved_dt = datetime.fromisoformat(resolved_at)
                expires_dt = resolved_dt + timedelta(days=PAYMENT_VALID_DAYS)
                lines.append(f"–û–ø–ª–∞—á–µ–Ω–æ –¥–æ: {expires_dt.strftime('%d.%m.%Y')}")
            except ValueError:
                pass
    if resolved_by:
        admin_info = resolved_by.get("admin_username")
        if admin_info:
            lines.append(f"–û–±—Ä–∞–±–æ—Ç–∞–ª: @{admin_info}")
        else:
            lines.append(f"–û–±—Ä–∞–±–æ—Ç–∞–ª ID: <code>{resolved_by.get('admin_id')}</code>")
    return "\n".join(lines)


async def show_main_menu(message: types.Message) -> None:
    try:
        await message.edit_text(WELCOME_TEXT, reply_markup=main_menu_keyboard())
    except exceptions.MessageNotModified:
        pass


async def show_auto_menu(message: types.Message, auto_data: dict) -> None:
    status = "–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ" if auto_data.get("is_enabled") else "–ù–µ –∑–∞–ø—É—â–µ–Ω–∞"
    message_preview_raw = auto_data.get("message") or "‚Äî –Ω–µ –∑–∞–¥–∞–Ω–æ"
    if len(message_preview_raw) > 180:
        message_preview_raw = message_preview_raw[:177] + "..."
    message_preview = quote_html(message_preview_raw)
    if len(message_preview) > 180:
        message_preview = message_preview[:177] + "..."
    interval = auto_data.get("interval_minutes") or 0
    targets = auto_data.get("target_chat_ids") or []
    payment_valid = await storage.has_recent_payment(within_days=PAYMENT_VALID_DAYS)
    latest_payment = await storage.latest_payment_timestamp()
    if payment_valid and latest_payment:
        expires_dt = latest_payment + timedelta(days=PAYMENT_VALID_DAYS)
        payment_line = f"–û–ø–ª–∞—Ç–∞: –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ {expires_dt.strftime('%d.%m.%Y')} ‚úÖ"
    else:
        payment_line = f"–û–ø–ª–∞—Ç–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ {PAYMENT_VALID_DAYS} –¥–Ω–µ–π)"
    text = (
        f"üõ† {hbold('–ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞')}\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω\n"
        f"–í—ã–±—Ä–∞–Ω–æ –≥—Ä—É–ø–ø: {len(targets)}\n\n"
        f"{payment_line}\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_preview}"
    )
    try:
        await message.edit_text(text, reply_markup=auto_menu_keyboard(is_enabled=auto_data.get("is_enabled")))
    except exceptions.MessageNotModified:
        pass


@dp.message_handler(commands=["start", "menu"], state="*")
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    await state.finish()
    await message.answer(WELCOME_TEXT, reply_markup=main_menu_keyboard())


@dp.message_handler(commands=["cancel"], state="*")
async def cmd_cancel(message: types.Message, state: FSMContext) -> None:
    if await state.get_state() is None:
        return
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.")
    await message.answer(WELCOME_TEXT, reply_markup=main_menu_keyboard())


@dp.message_handler(commands=["–∞–¥–º–∏–Ω", "admin"], state="*")
async def cmd_set_admin(message: types.Message, state: FSMContext) -> None:
    await state.finish()
    user = message.from_user
    if await is_admin_user(user.id):
        await message.answer("–í—ã —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return
    await storage.set_user_role(user.id, "admin")
    await message.answer(
        "–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∏—Ö."
    )


@dp.callback_query_handler(lambda c: c.data == "main:auto")
async def cb_main_auto(call: types.CallbackQuery) -> None:
    await call.answer()
    auto_data = await storage.get_auto()
    await show_auto_menu(call.message, auto_data)


@dp.callback_query_handler(lambda c: c.data == "main:stats")
async def cb_main_stats(call: types.CallbackQuery) -> None:
    await call.answer()
    auto = await storage.get_auto()
    stats = auto.get("stats") or {}
    sent_total = stats.get("sent_total", 0)
    last_sent_at = stats.get("last_sent_at")
    last_error = stats.get("last_error")
    latest_payment = await storage.latest_payment_timestamp()
    payment_valid = await storage.has_recent_payment(within_days=PAYMENT_VALID_DAYS)
    human_time = "‚Äî"
    if last_sent_at:
        try:
            dt = datetime.fromisoformat(last_sent_at)
            human_time = dt.strftime("%d.%m.%Y %H:%M:%S")
        except ValueError:
            human_time = last_sent_at
    if latest_payment:
        payment_due = latest_payment + timedelta(days=PAYMENT_VALID_DAYS)
        payment_line = (
            f"–û–ø–ª–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ {payment_due.strftime('%d.%m.%Y')}"
            if payment_valid
            else f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ {payment_due.strftime('%d.%m.%Y')}"
        )
    else:
        payment_line = "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    lines = [
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏</b>",
        f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_total}",
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {human_time}",
        payment_line,
    ]
    if last_error:
        lines.append("–û—à–∏–±–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞:")
        lines.append(last_error)
    else:
        lines.append("–û—à–∏–±–æ–∫ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    await call.message.edit_text("\n".join(lines), reply_markup=main_menu_keyboard())


@dp.callback_query_handler(lambda c: c.data == "main:groups")
async def cb_main_groups(call: types.CallbackQuery) -> None:
    await call.answer()
    known = await storage.list_known_chats()
    auto = await storage.get_auto()
    selected = auto.get("target_chat_ids") or []
    if not known:
        await call.message.edit_text(
            "üìã –ü–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
            reply_markup=main_menu_keyboard(),
        )
        return
    header = (
        "üìã <b>–í—ã–±–æ—Ä –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å —á–∞—Ç."
    )
    await call.message.edit_text(
        header,
        reply_markup=groups_keyboard(known, selected, origin="main"),
    )


@dp.callback_query_handler(lambda c: c.data == "main:settings")
async def cb_main_settings(call: types.CallbackQuery) -> None:
    await call.answer()
    auto = await storage.get_auto()
    interval = auto.get("interval_minutes")
    message_text_raw = auto.get("message") or "‚Äî –Ω–µ –∑–∞–¥–∞–Ω–æ"
    message_text = quote_html(message_text_raw)
    targets = auto.get("target_chat_ids") or []
    status = "–ê–∫—Ç–∏–≤–Ω–∞" if auto.get("is_enabled") else "–û—Ç–∫–ª—é—á–µ–Ω–∞"
    payment_valid = await storage.has_recent_payment(within_days=PAYMENT_VALID_DAYS)
    latest_payment = await storage.latest_payment_timestamp()
    if payment_valid and latest_payment:
        expires_dt = latest_payment + timedelta(days=PAYMENT_VALID_DAYS)
        payment_line = f"–û–ø–ª–∞—Ç–∞: –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ {expires_dt.strftime('%d.%m.%Y')} ‚úÖ"
    else:
        payment_line = f"–û–ø–ª–∞—Ç–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ {PAYMENT_VALID_DAYS} –¥–Ω–µ–π)"
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω\n"
        f"–ì—Ä—É–ø–ø—ã: {len(targets)} –≤—ã–±—Ä–∞–Ω–æ\n"
        f"{payment_line}\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}"
    )
    await call.message.edit_text(text, reply_markup=main_menu_keyboard())


@dp.callback_query_handler(lambda c: c.data == "main:pay")
async def cb_main_pay(call: types.CallbackQuery, state: FSMContext) -> None:
    await call.answer()
    admin_ids = await collect_admin_ids()
    eligible_admin_ids = {
        admin_id
        for admin_id in admin_ids
        if admin_id != call.from_user.id or await is_admin_user(call.from_user.id)
    }
    if not eligible_admin_ids:
        await call.message.answer(
            "–ü–ª–∞—Ç—ë–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        return
    await state.finish()
    await PaymentStates.waiting_for_card_number.set()
    await call.message.answer(
        f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {PAYMENT_DESCRIPTION}.\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {format_currency(PAYMENT_AMOUNT, PAYMENT_CURRENCY)}.\n\n"
        f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç {PAYMENT_VALID_DAYS} –¥–Ω–µ–π.\n\n"
        "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É <code>9860 1701 1433 3116</code> –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–∞—Ä—Ç—ã –Ω–∏–∂–µ.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (12‚Äì19 —Ü–∏—Ñ—Ä).\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.",
        disable_web_page_preview=True,
    )


@dp.callback_query_handler(lambda c: c.data == "auto:back")
async def cb_auto_back(call: types.CallbackQuery) -> None:
    await call.answer()
    await show_main_menu(call.message)


@dp.callback_query_handler(lambda c: c.data == "auto:set_message")
async def cb_auto_set_message(call: types.CallbackQuery, state: FSMContext) -> None:
    await call.answer()
    await AutoCampaignStates.waiting_for_message.set()
    await call.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


@dp.message_handler(state=AutoCampaignStates.waiting_for_message, content_types=types.ContentTypes.TEXT)
async def process_auto_message(message: types.Message, state: FSMContext) -> None:
    text = message.text.strip()
    if not text:
        await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await storage.set_auto_message(text)
    await storage.ensure_constraints()
    auto_sender: AutoSender = message.bot["auto_sender"]
    await auto_sender.refresh()
    await state.finish()
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    auto_data = await storage.get_auto()
    await message.answer(
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        reply_markup=auto_menu_keyboard(is_enabled=auto_data.get("is_enabled")),
    )


@dp.callback_query_handler(lambda c: c.data == "auto:set_interval")
async def cb_auto_set_interval(call: types.CallbackQuery, state: FSMContext) -> None:
    await call.answer()
    await AutoCampaignStates.waiting_for_interval.set()
    await call.message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ > 0).\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


@dp.message_handler(state=AutoCampaignStates.waiting_for_interval)
async def process_auto_interval(message: types.Message, state: FSMContext) -> None:
    content = message.text.strip()
    if not content.isdigit():
        await message.reply("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    minutes = int(content)
    if minutes <= 0:
        await message.reply("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    await storage.set_auto_interval(minutes)
    await storage.ensure_constraints()
    auto_sender: AutoSender = message.bot["auto_sender"]
    await auto_sender.refresh()
    await state.finish()
    await message.answer(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {minutes} –º–∏–Ω.")
    auto_data = await storage.get_auto()
    await message.answer(
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        reply_markup=auto_menu_keyboard(is_enabled=auto_data.get("is_enabled")),
    )


@dp.message_handler(state=PaymentStates.waiting_for_card_number, content_types=types.ContentTypes.TEXT)
async def process_payment_card_number(message: types.Message, state: FSMContext) -> None:
    digits = "".join(filter(str.isdigit, message.text or ""))
    if len(digits) < 12 or len(digits) > 19:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (12‚Äì19 —Ü–∏—Ñ—Ä).")
        return
    formatted = " ".join(digits[i : i + 4] for i in range(0, len(digits), 4))
    await state.update_data(card_number=formatted)
    await PaymentStates.waiting_for_card_name.set()
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∏–º—è, –∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–µ.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel."
    )


@dp.message_handler(state=PaymentStates.waiting_for_card_name, content_types=types.ContentTypes.TEXT)
async def process_payment_card_name(message: types.Message, state: FSMContext) -> None:
    card_name = (message.text or "").strip()
    if len(card_name) < 3:
        await message.reply("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
    data = await state.get_data()
    card_number = data.get("card_number")
    if not card_number:
        await state.finish()
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É.")
        return
    user = message.from_user
    user_role = await get_user_role(user.id)
    request_id = await storage.create_payment_request(
        user_id=user.id,
        username=user.username,
        full_name=user.full_name or user.username or str(user.id),
        card_number=card_number,
        card_name=card_name,
    )
    payment = await storage.get_payment(request_id)
    if payment:
        admin_text = build_payment_admin_text(payment)
        admin_ids = await collect_admin_ids()
        for admin_id in admin_ids:
            if admin_id == user.id and user_role != "admin":
                continue
            if not await is_admin_user(admin_id):
                continue
            try:
                await bot.send_message(
                    admin_id,
                    admin_text,
                    reply_markup=payment_admin_keyboard(request_id),
                )
            except exceptions.TelegramAPIError as exc:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ %s: %s", admin_id, exc)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. \n"
        f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å {PAYMENT_VALID_DAYS} –¥–Ω–µ–π."
    )
    await state.finish()


@dp.callback_query_handler(lambda c: c.data == "auto:pick_groups")
async def cb_auto_pick_groups(call: types.CallbackQuery) -> None:
    await call.answer()
    known = await storage.list_known_chats()
    auto = await storage.get_auto()
    selected = auto.get("target_chat_ids") or []
    if not known:
        await call.message.answer(
            "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º,"
            " –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        return
    text = (
        "üìã <b>–í—ã–±–æ—Ä –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å —á–∞—Ç."
    )
    await call.message.edit_text(
        text,
        reply_markup=groups_keyboard(known, selected, origin="auto"),
    )


@dp.callback_query_handler(lambda c: c.data.startswith("group:"))
async def cb_group_toggle(call: types.CallbackQuery) -> None:
    await call.answer()
    try:
        _, origin, action = call.data.split(":", maxsplit=2)
    except ValueError:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
        return
    if action == "done":
        if origin == "main":
            await call.message.edit_text(WELCOME_TEXT, reply_markup=main_menu_keyboard())
        else:
            auto_data = await storage.get_auto()
            await show_auto_menu(call.message, auto_data)
        return
    try:
        chat_id = int(action)
    except ValueError:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞", show_alert=True)
        return
    known = await storage.list_known_chats()
    title_raw = (known.get(str(chat_id)) or {}).get("title") or str(chat_id)
    title = quote_html(title_raw)
    selected = await storage.toggle_target_chat(chat_id, title_raw)
    await storage.ensure_constraints()
    auto_sender: AutoSender = call.bot["auto_sender"]
    await auto_sender.refresh()
    known = await storage.list_known_chats()
    auto = await storage.get_auto()
    reply_text = (
        "üìã <b>–í—ã–±–æ—Ä –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"–ß–∞—Ç {'–¥–æ–±–∞–≤–ª–µ–Ω –≤' if selected else '—É–±—Ä–∞–Ω –∏–∑'} —Ä–∞—Å—Å—ã–ª–∫–∏: {title}\n"
        "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
    )
    await call.message.edit_text(
        reply_text,
        reply_markup=groups_keyboard(known, auto.get("target_chat_ids"), origin=origin),
    )


@dp.callback_query_handler(lambda c: c.data.startswith("payment:"))
async def cb_payment_decision(call: types.CallbackQuery) -> None:
    if not await is_admin_user(call.from_user.id):
        await call.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return
    try:
        _, action, request_id = call.data.split(":", maxsplit=2)
    except ValueError:
        await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return
    payment = await storage.get_payment(request_id)
    if not payment:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    if payment.get("status") != "pending":
        await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", show_alert=True)
        return
    if action not in {"approve", "decline"}:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return
    status = "approved" if action == "approve" else "declined"
    updated = await storage.set_payment_status(
        request_id,
        status=status,
        admin_id=call.from_user.id,
        admin_username=call.from_user.username,
    )
    if not updated:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É.", show_alert=True)
        return
    if status == "approved":
        expires_text = ""
        resolved_at = updated.get("resolved_at")
        if resolved_at:
            try:
                resolved_dt = datetime.fromisoformat(resolved_at)
                expires_dt = resolved_dt + timedelta(days=PAYMENT_VALID_DAYS)
                expires_text = f" –û–ø–ª–∞—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expires_dt.strftime('%d.%m.%Y')} –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ."
            except ValueError:
                expires_text = ""
        status_message = "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É. –°–ø–∞—Å–∏–±–æ!" + expires_text
    else:
        status_message = "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –æ–ø–ª–∞—Ç—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
    user_id = updated.get("user_id")
    try:
        await bot.send_message(user_id, status_message)
    except exceptions.TelegramAPIError as exc:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_id, exc)
    admin_text = build_payment_admin_text(updated)
    await call.message.edit_text(admin_text)
    await call.answer("–†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")


@dp.callback_query_handler(lambda c: c.data == "auto:start")
async def cb_auto_start(call: types.CallbackQuery) -> None:
    await call.answer()
    auto = await storage.get_auto()
    if not auto.get("message"):
        await call.message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    if not auto.get("target_chat_ids"):
        await call.message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    if (auto.get("interval_minutes") or 0) <= 0:
        await call.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª. –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω—É–ª—è.")
        return
    if not await storage.has_recent_payment(within_days=PAYMENT_VALID_DAYS):
        await call.message.answer(
            f"–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {PAYMENT_VALID_DAYS} –¥–Ω–µ–π."
        )
        return
    await storage.set_auto_enabled(True)
    auto_sender: AutoSender = call.bot["auto_sender"]
    await auto_sender.ensure_running()
    await call.message.answer("–ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
    updated = await storage.get_auto()
    await show_auto_menu(call.message, updated)


@dp.callback_query_handler(lambda c: c.data == "auto:stop")
async def cb_auto_stop(call: types.CallbackQuery) -> None:
    await call.answer()
    await storage.set_auto_enabled(False)
    auto_sender: AutoSender = call.bot["auto_sender"]
    await auto_sender.stop()
    await call.message.answer("–ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    updated = await storage.get_auto()
    await show_auto_menu(call.message, updated)


@dp.my_chat_member_handler()
async def handle_my_chat_member(update: types.ChatMemberUpdated) -> None:
    new_status = update.new_chat_member.status
    chat = update.chat
    if chat.type not in (types.ChatType.GROUP, types.ChatType.SUPERGROUP):
        return
    title = chat.title or chat.full_name or str(chat.id)
    if new_status == types.ChatMemberStatus.ADMINISTRATOR:
        await storage.upsert_known_chat(chat.id, title)
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç %s (%s)", chat.id, title)
    elif new_status in (
        types.ChatMemberStatus.LEFT,
        types.ChatMemberStatus.KICKED,
        types.ChatMemberStatus.RESTRICTED,
    ):
        await storage.remove_known_chat(chat.id)
        logger.info("–£–¥–∞–ª—ë–Ω —á–∞—Ç %s", chat.id)


@dp.message_handler(content_types=types.ContentTypes.TEXT, chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def handle_group_text(message: types.Message) -> None:
    chat = message.chat
    title_raw = chat.title or chat.full_name or str(chat.id)
    bot_id = message.bot.get("bot_id")
    if bot_id is None:
        me = await message.bot.get_me()
        bot_id = me.id
        message.bot["bot_id"] = bot_id
    member = await message.bot.get_chat_member(chat.id, bot_id)
    if member.is_chat_admin():
        await storage.upsert_known_chat(chat.id, title_raw)


async def on_startup(dispatcher: Dispatcher) -> None:
    me = await dispatcher.bot.get_me()
    auto_sender = AutoSender(dispatcher.bot, storage, me.id, PAYMENT_VALID_DAYS)
    dispatcher.bot["auto_sender"] = auto_sender
    dispatcher.bot["bot_id"] = me.id
    await storage.ensure_constraints()
    await auto_sender.start_if_enabled()
    logger.info("–ë–æ—Ç %s (%s) –∑–∞–ø—É—â–µ–Ω", me.first_name, me.id)


async def on_shutdown(dispatcher: Dispatcher) -> None:
    auto_sender: Optional[AutoSender] = dispatcher.bot.get("auto_sender")
    if auto_sender:
        await auto_sender.stop()
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup, on_shutdown=on_shutdown)
